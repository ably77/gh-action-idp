name: Apply Workspace Action

on:
  workflow_dispatch:
    inputs:
      workspace_name:
        description: 'The name of the Workspace'
        required: true
        default: 'gh-action-idp'
        type: string
      namespaces:
        description: 'Comma-separated list of namespaces to include in the Workspace. Namespaces will be mapped 1:1 to teams. These will be turned into nested prefix matchers such as /team-a and /team-b'
        required: true
        default: 'team-a,team-b'
        type: string

permissions:
  contents: write

jobs:
  apply-manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create namespace manifest file in GitHub
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}

          NAMESPACE_FILE_PATH="mesh-admin/${WORKSPACE_NAME}-namespace.yaml"

          # Create or overwrite the Namespace manifest file
          echo "apiVersion: v1" > $NAMESPACE_FILE_PATH
          echo "kind: Namespace" >> $NAMESPACE_FILE_PATH
          echo "metadata:" >> $NAMESPACE_FILE_PATH
          echo "  name: ${WORKSPACE_NAME}" >> $NAMESPACE_FILE_PATH

          # Print the contents of the file for debugging
          echo "Contents of $NAMESPACE_FILE_PATH:"
          cat $NAMESPACE_FILE_PATH

      - name: Create a branch for update
        id: create_branch
        run: |
          BRANCH_NAME="workspace-update-${{ github.run_id }}-${{ github.event.inputs.workspace_name }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create or update Workspace and WorkspaceSettings manifests
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}
          NAMESPACES=${{ github.event.inputs.namespaces }}

          WORKSPACE_FILE_PATH="mesh-admin/${WORKSPACE_NAME}-workspace.yaml"
          WORKSPACE_SETTINGS_FILE_PATH="mesh-admin/${WORKSPACE_NAME}-workspacesettings.yaml"

          # Create or overwrite the Workspace YAML file
          echo "apiVersion: admin.gloo.solo.io/v2" > $WORKSPACE_FILE_PATH
          echo "kind: Workspace" >> $WORKSPACE_FILE_PATH
          echo "metadata:" >> $WORKSPACE_FILE_PATH
          echo "  name: ${WORKSPACE_NAME}" >> $WORKSPACE_FILE_PATH
          echo "  namespace: gloo-mesh" >> $WORKSPACE_FILE_PATH
          echo "spec:" >> $WORKSPACE_FILE_PATH
          echo "  workloadClusters:" >> $WORKSPACE_FILE_PATH
          echo "  - name: '*'" >> $WORKSPACE_FILE_PATH
          echo "    namespaces:" >> $WORKSPACE_FILE_PATH

          # Add WORKSPACE_NAME as a namespace and then split the namespaces input
          echo "      - name: ${WORKSPACE_NAME}" >> $WORKSPACE_FILE_PATH

          # Split the namespaces and write each one into the YAML file
          IFS=',' read -ra NAMESPACE_ARRAY <<< "$NAMESPACES"
          for NAMESPACE in "${NAMESPACE_ARRAY[@]}"; do
            echo "      - name: ${NAMESPACE}" >> $WORKSPACE_FILE_PATH
          done

          # Create or overwrite the WorkspaceSettings YAML file
          echo "apiVersion: admin.gloo.solo.io/v2" > $WORKSPACE_SETTINGS_FILE_PATH
          echo "kind: WorkspaceSettings" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "metadata:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "  name: ${WORKSPACE_NAME}" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "  namespace: ${WORKSPACE_NAME}" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "spec:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "  exportTo:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "  - workspaces:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "    - name: ops-team" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "  importFrom:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "  - workspaces:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "    - name: ops-team" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "  options:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "    serviceIsolation:" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "      enabled: true" >> $WORKSPACE_SETTINGS_FILE_PATH
          echo "      trimProxyConfig: true" >> $WORKSPACE_SETTINGS_FILE_PATH

          # Print the contents of the files for debugging
          echo "Contents of $WORKSPACE_FILE_PATH:"
          cat $WORKSPACE_FILE_PATH
          echo "Contents of $WORKSPACE_SETTINGS_FILE_PATH:"
          cat $WORKSPACE_SETTINGS_FILE_PATH

      - name: Create or update RouteTable manifests
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}
          NAMESPACES=${{ github.event.inputs.namespaces }}

          ROUTETABLE_FILE_PATH="routes/${WORKSPACE_NAME}-parent-routetable.yaml"

          # Create or overwrite the RouteTable file
          echo "apiVersion: networking.gloo.solo.io/v2" > $ROUTETABLE_FILE_PATH
          echo "kind: RouteTable" >> $ROUTETABLE_FILE_PATH
          echo "metadata:" >> $ROUTETABLE_FILE_PATH
          echo "  name: ${WORKSPACE_NAME}-parent" >> $ROUTETABLE_FILE_PATH
          echo "  namespace: ops-team-config" >> $ROUTETABLE_FILE_PATH
          echo "spec:" >> $ROUTETABLE_FILE_PATH
          echo "  hosts:" >> $ROUTETABLE_FILE_PATH
          echo "    - '${WORKSPACE_NAME}.demo.glooplatform.com'" >> $ROUTETABLE_FILE_PATH
          echo "  virtualGateways:" >> $ROUTETABLE_FILE_PATH
          echo "    - name: mgmt-north-south-gw-443" >> $ROUTETABLE_FILE_PATH
          echo "      namespace: istio-gateways" >> $ROUTETABLE_FILE_PATH
          echo "      cluster: mgmt" >> $ROUTETABLE_FILE_PATH
          echo "  http:" >> $ROUTETABLE_FILE_PATH

          # Split the namespaces and write each route into the YAML file
          IFS=',' read -ra NAMESPACE_ARRAY <<< "$NAMESPACES"
          for NAMESPACE in "${NAMESPACE_ARRAY[@]}"; do
            echo "    - name: ${WORKSPACE_NAME}-${NAMESPACE}" >> $ROUTETABLE_FILE_PATH
            echo "      matchers:" >> $ROUTETABLE_FILE_PATH
            echo "        - uri:" >> $ROUTETABLE_FILE_PATH
            echo "            prefix: /${NAMESPACE}" >> $ROUTETABLE_FILE_PATH
            echo "      delegate:" >> $ROUTETABLE_FILE_PATH
            echo "        routeTables:" >> $ROUTETABLE_FILE_PATH
            echo "          - labels:" >> $ROUTETABLE_FILE_PATH
            echo "              workspace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
            echo "              team: ${NAMESPACE}" >> $ROUTETABLE_FILE_PATH
          done

          # Print the contents of the file for debugging
          echo "Contents of $ROUTETABLE_FILE_PATH:"
          cat $ROUTETABLE_FILE_PATH

      - name: Commit and push changes
        run: |
          git add .
          git commit -m "Created/Updated Namespace, Workspace, WorkspaceSettings, and RouteTable for workspace ${{ github.event.inputs.workspace_name }} with namespaces ${{ github.event.inputs.namespaces }}" || echo "No changes to commit"
          git push origin $BRANCH_NAME

      - name: Merge branch into main
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git merge --allow-unrelated-histories --no-ff $BRANCH_NAME || {
            git merge --strategy-option theirs --no-commit --no-ff $BRANCH_NAME &&
            git commit -m "Resolve merge conflict by keeping new changes"
          }
          git push origin main || (git pull --rebase origin main && git push origin main)

      - name: Delete branch after merge
        run: |
          git push origin --delete $BRANCH_NAME
