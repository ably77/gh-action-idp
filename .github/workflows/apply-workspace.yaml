name: Apply Workspace Action

on:
  workflow_dispatch:
    inputs:
      workspace_name:
        description: 'The name of the Workspace'
        required: true
        type: string
      namespaces:
        description: 'Comma-separated list of namespaces to include in the Workspace'
        required: true
        type: string
      team_names:
        description: 'Comma-separated list of team names'
        required: true
        type: string

permissions:
  contents: write

jobs:
  create-manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create an empty branch
        id: create_branch
        run: |
          BRANCH_NAME="workspace-update-${{ github.run_id }}-${{ github.event.inputs.workspace_name }}"
          git checkout --orphan $BRANCH_NAME
          git rm -rf .
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Render Workspace, WorkspaceSettings, and RouteTable manifests based on input
        id: render_manifests
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}
          NAMESPACES=${{ github.event.inputs.namespaces }}
          TEAM_NAMES=${{ github.event.inputs.team_names }}

          WORKSPACE_FILE_PATH="mesh-admin/${WORKSPACE_NAME}-workspace.yaml"
          WORKSPACE_SETTINGS_FILE_PATH="mesh-admin/${WORKSPACE_NAME}-workspacesettings.yaml"
          ROUTETABLE_FILE_PATH="routes/${WORKSPACE_NAME}-parent-routetable.yaml"

          mkdir -p mesh-admin
          mkdir -p routes

          # Start writing the Workspace YAML file
          echo "apiVersion: admin.gloo.solo.io/v2" > $WORKSPACE_FILE_PATH
          echo "kind: Workspace" >> $WORKSPACE_FILE_PATH
          echo "metadata:" >> $WORKSPACE_FILE_PATH
          echo "  name: ${WORKSPACE_NAME}" >> $WORKSPACE_FILE_PATH
          echo "  namespace: gloo-mesh" >> $WORKSPACE_FILE_PATH
          echo "spec:" >> $WORKSPACE_FILE_PATH
          echo "  workloadClusters:" >> $WORKSPACE_FILE_PATH
          echo "  - name: '*'" >> $WORKSPACE_FILE_PATH
          echo "    namespaces:" >> $WORKSPACE_FILE_PATH

          # Split the namespaces and write each one into the YAML file
          IFS=',' read -ra NAMESPACE_ARRAY <<< "$NAMESPACES"
          for NAMESPACE in "${NAMESPACE_ARRAY[@]}"; do
            echo "      - name: ${NAMESPACE}" >> $WORKSPACE_FILE_PATH
          done

          # Write the WorkspaceSettings YAML file
          cat <<EOF > $WORKSPACE_SETTINGS_FILE_PATH
          apiVersion: admin.gloo.solo.io/v2
          kind: WorkspaceSettings
          metadata:
            name: ${WORKSPACE_NAME}
            namespace: ${WORKSPACE_NAME}
          spec:
            exportTo:
            - workspaces:
              - name: ops-team
            importFrom:
            - workspaces:
              - name: ops-team
            options:
              serviceIsolation:
                enabled: true
                trimProxyConfig: true
          EOF

          # Start writing the RouteTable YAML file
          echo "apiVersion: networking.gloo.solo.io/v2" > $ROUTETABLE_FILE_PATH
          echo "kind: RouteTable" >> $ROUTETABLE_FILE_PATH
          echo "metadata:" >> $ROUTETABLE_FILE_PATH
          echo "  name: ${WORKSPACE_NAME}-parent" >> $ROUTETABLE_FILE_PATH
          echo "  namespace: ops-team-config" >> $ROUTETABLE_FILE_PATH
          echo "spec:" >> $ROUTETABLE_FILE_PATH
          echo "  hosts:" >> $ROUTETABLE_FILE_PATH
          echo "    - '${WORKSPACE_NAME}.demo.glooplatform.com'" >> $ROUTETABLE_FILE_PATH
          echo "  virtualGateways:" >> $ROUTETABLE_FILE_PATH
          echo "    - name: mgmt-north-south-gw-443" >> $ROUTETABLE_FILE_PATH
          echo "      namespace: istio-gateways" >> $ROUTETABLE_FILE_PATH
          echo "      cluster: mgmt" >> $ROUTETABLE_FILE_PATH
          echo "  http:" >> $ROUTETABLE_FILE_PATH

          # Split the team names and write each route into the YAML file
          IFS=',' read -ra TEAM_ARRAY <<< "$TEAM_NAMES"
          for TEAM in "${TEAM_ARRAY[@]}"; do
            echo "    - name: ${WORKSPACE_NAME}-${TEAM}" >> $ROUTETABLE_FILE_PATH
            echo "      matchers:" >> $ROUTETABLE_FILE_PATH
            echo "        - uri:" >> $ROUTETABLE_FILE_PATH
            echo "            prefix: /${TEAM}" >> $ROUTETABLE_FILE_PATH
            echo "      delegate:" >> $ROUTETABLE_FILE_PATH
            echo "        routeTables:" >> $ROUTETABLE_FILE_PATH
            echo "          - labels:" >> $ROUTETABLE_FILE_PATH
            echo "              workspace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
            echo "              team: ${TEAM_NAME}" >> $ROUTETABLE_FILE_PATH
          done

          echo "WORKSPACE_FILE_PATH=$WORKSPACE_FILE_PATH" >> $GITHUB_ENV
          echo "WORKSPACE_SETTINGS_FILE_PATH=$WORKSPACE_SETTINGS_FILE_PATH" >> $GITHUB_ENV
          echo "ROUTETABLE_FILE_PATH=$ROUTETABLE_FILE_PATH" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          git add ${{ env.WORKSPACE_FILE_PATH }} ${{ env.WORKSPACE_SETTINGS_FILE_PATH }} ${{ env.ROUTETABLE_FILE_PATH }}
          git commit -m "Add new Workspace, WorkspaceSettings, and RouteTable for workspace ${{ github.event.inputs.workspace_name }}"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Merge branch into main
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git merge --allow-unrelated-histories --no-ff ${{ env.BRANCH_NAME }} || \
          (git checkout --theirs -- mesh-admin/${{ github.event.inputs.workspace_name }}-workspace.yaml && git add mesh-admin/${{ github.event.inputs.workspace_name }}-workspace.yaml && git commit -m "Resolve conflict by keeping new changes" && git push origin main)
          git push origin main || (git pull --rebase origin main && git push origin main)

      - name: Delete branch after merge
        run: |
          git push origin --delete ${{ env.BRANCH_NAME }}
