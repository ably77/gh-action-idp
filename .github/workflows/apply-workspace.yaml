name: Apply Workspace Action

on:
  workflow_dispatch:
    inputs:
      workspace_name:
        description: 'The name of the Workspace'
        required: true
        default: 'gh-action-idp'
        type: string
      namespaces:
        description: 'Comma-separated list of namespaces to include in the Workspace'
        required: true
        default: 'gh-action-idp'
        type: string
      team_names:
        description: 'Comma-separated list of team names. These will be turned into nested prefix matchers such as /team-a and /team-b'
        required: true
        type: string

permissions:
  contents: write

jobs:
  apply-manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create a branch for update
        id: create_branch
        run: |
          BRANCH_NAME="workspace-update-${{ github.run_id }}-${{ github.event.inputs.workspace_name }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create or update RouteTable manifests
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}
          TEAM_NAMES=${{ github.event.inputs.team_names }}

          ROUTETABLE_FILE_PATH="routes/${WORKSPACE_NAME}-parent-routetable.yaml"

          if [ -f "$ROUTETABLE_FILE_PATH" ]; then
            # Update the existing RouteTable
            IFS=',' read -ra TEAM_ARRAY <<< "$TEAM_NAMES"
            for TEAM in "${TEAM_ARRAY[@]}"; do
              sed -i'' -e "s|prefix: /.*|prefix: /${TEAM}|g" $ROUTETABLE_FILE_PATH
              sed -i'' -e "s|team: .*$|team: ${TEAM}|g" $ROUTETABLE_FILE_PATH
              sed -i'' -e "s/name: .*/name: ${WORKSPACE_NAME}-${TEAM}/g" $ROUTETABLE_FILE_PATH
            done
          else
            # Create a new RouteTable file
            echo "apiVersion: networking.gloo.solo.io/v2" > $ROUTETABLE_FILE_PATH
            echo "kind: RouteTable" >> $ROUTETABLE_FILE_PATH
            echo "metadata:" >> $ROUTETABLE_FILE_PATH
            echo "  name: ${WORKSPACE_NAME}-parent" >> $ROUTETABLE_FILE_PATH
            echo "  namespace: ops-team-config" >> $ROUTETABLE_FILE_PATH
            echo "spec:" >> $ROUTETABLE_FILE_PATH
            echo "  hosts:" >> $ROUTETABLE_FILE_PATH
            echo "    - '${WORKSPACE_NAME}.demo.glooplatform.com'" >> $ROUTETABLE_FILE_PATH
            echo "  virtualGateways:" >> $ROUTETABLE_FILE_PATH
            echo "    - name: mgmt-north-south-gw-443" >> $ROUTETABLE_FILE_PATH
            echo "      namespace: istio-gateways" >> $ROUTETABLE_FILE_PATH
            echo "      cluster: mgmt" >> $ROUTETABLE_FILE_PATH
            echo "  http:" >> $ROUTETABLE_FILE_PATH

            IFS=',' read -ra TEAM_ARRAY <<< "$TEAM_NAMES"
            for TEAM in "${TEAM_ARRAY[@]}"; do
              echo "    - name: ${WORKSPACE_NAME}-${TEAM}" >> $ROUTETABLE_FILE_PATH
              echo "      matchers:" >> $ROUTETABLE_FILE_PATH
              echo "        - uri:" >> $ROUTETABLE_FILE_PATH
              echo "            prefix: /${TEAM}" >> $ROUTETABLE_FILE_PATH
              echo "      delegate:" >> $ROUTETABLE_FILE_PATH
              echo "        routeTables:" >> $ROUTETABLE_FILE_PATH
              echo "          - labels:" >> $ROUTETABLE_FILE_PATH
              echo "              workspace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
              echo "              team: ${TEAM}" >> $ROUTETABLE_FILE_PATH
            done
          fi

      - name: Commit and push changes
        run: |
          git add -u
          git commit -m "Created/Updated RouteTable for workspace ${{ github.event.inputs.workspace_name }} with teams ${{ github.event.inputs.team_names }}" || echo "No changes to commit"
          git push origin $BRANCH_NAME

      - name: Merge branch into main
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git merge --allow-unrelated-histories --no-ff $BRANCH_NAME || {
            git merge --strategy-option theirs --no-commit --no-ff $BRANCH_NAME &&
            git commit -m "Resolve merge conflict by keeping new changes"
          }
          git push origin main || (git pull --rebase origin main && git push origin main)

      - name: Delete branch after merge
        run: |
          git push origin --delete $BRANCH_NAME
