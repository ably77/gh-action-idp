name: Apply Delegate RouteTable

on:
  workflow_dispatch:
    inputs:
      workspace_name:
        description: 'The name of the Workspace'
        required: true
        default: 'gh-action-idp'
        type: string
      team_name:
        description: 'The name of the team using this RouteTable'
        required: true
        type: string
      matchers:
        description: 'Comma-separated list of URI prefixes for matchers without leading slash (e.g., "get,ip")'
        required: true
        type: string
      destination_kind:
        description: 'The kind of the destination resource (e.g., SERVICE)'
        required: false
        default: 'SERVICE'
        type: string
      destination_name:
        description: 'Name of the destination service'
        required: true
        type: string
      destination_port:
        description: 'Port number of the destination service'
        required: true
        type: string

permissions:
  contents: write

jobs:
  apply-delegate-route:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create a branch for update
        id: create_branch
        run: |
          BRANCH_NAME="delegate-route-${{ github.run_id }}-${{ github.event.inputs.workspace_name }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Create or update Delegate RouteTable manifest
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}
          TEAM_NAME=${{ github.event.inputs.team_name }}
          MATCHERS=${{ github.event.inputs.matchers }}
          DESTINATION_KIND=${{ github.event.inputs.destination_kind || 'SERVICE' }}
          DESTINATION_NAME=${{ github.event.inputs.destination_name }}
          DESTINATION_PORT=${{ github.event.inputs.destination_port }}

          ROUTETABLE_FILE_PATH="routes/${WORKSPACE_NAME}-${TEAM_NAME}-delegate-routetable.yaml"

          if [ -f "$ROUTETABLE_FILE_PATH" ]; then
            echo "Updating existing RouteTable at $ROUTETABLE_FILE_PATH"
            sed -i'' -e "s|name: .*|name: ${WORKSPACE_NAME}-${TEAM_NAME}-delegate|g" $ROUTETABLE_FILE_PATH
            sed -i'' -e "s|workspace: .*|workspace: ${WORKSPACE_NAME}|g" $ROUTETABLE_FILE_PATH
            sed -i'' -e "s|team: .*|team: ${TEAM_NAME}|g" $ROUTETABLE_FILE_PATH
            sed -i'' -e "s|number: .*|number: ${DESTINATION_PORT}|g" $ROUTETABLE_FILE_PATH
            sed -i'' -e "s|name: .*|name: ${DESTINATION_NAME}|g" $ROUTETABLE_FILE_PATH
            sed -i'' -e "s|namespace: .*|namespace: ${WORKSPACE_NAME}|g" $ROUTETABLE_FILE_PATH

            IFS=',' read -ra MATCHER_ARRAY <<< "$MATCHERS"
            for MATCHER in "${MATCHER_ARRAY[@]}"; do
              sed -i'' -e "s|prefix: /.*|prefix: /${MATCHER}|g" $ROUTETABLE_FILE_PATH
              sed -i'' -e "s|pathRewrite: .*|pathRewrite: /${MATCHER}|g" $ROUTETABLE_FILE_PATH
            done
          else
            echo "Creating new RouteTable at $ROUTETABLE_FILE_PATH"
            mkdir -p routes
            echo "apiVersion: networking.gloo.solo.io/v2" > $ROUTETABLE_FILE_PATH
            echo "kind: RouteTable" >> $ROUTETABLE_FILE_PATH
            echo "metadata:" >> $ROUTETABLE_FILE_PATH
            echo "  name: ${WORKSPACE_NAME}-${TEAM_NAME}-delegate" >> $ROUTETABLE_FILE_PATH
            echo "  namespace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
            echo "  labels:" >> $ROUTETABLE_FILE_PATH
            echo "    workspace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
            echo "    team: ${TEAM_NAME}" >> $ROUTETABLE_FILE_PATH
            echo "spec:" >> $ROUTETABLE_FILE_PATH
            echo "  defaultDestination:" >> $ROUTETABLE_FILE_PATH
            echo "    port:" >> $ROUTETABLE_FILE_PATH
            echo "      number: ${DESTINATION_PORT}" >> $ROUTETABLE_FILE_PATH
            echo "    ref:" >> $ROUTETABLE_FILE_PATH
            echo "      name: ${DESTINATION_NAME}" >> $ROUTETABLE_FILE_PATH
            echo "      namespace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
            echo "  http:" >> $ROUTETABLE_FILE_PATH

            IFS=',' read -ra MATCHER_ARRAY <<< "$MATCHERS"
            for MATCHER in "${MATCHER_ARRAY[@]}"; do
              echo "  - name: ${TEAM_NAME}-${MATCHER}" >> $ROUTETABLE_FILE_PATH
              echo "    matchers:" >> $ROUTETABLE_FILE_PATH
              echo "    - uri:" >> $ROUTETABLE_FILE_PATH
              echo "        prefix: /${MATCHER}" >> $ROUTETABLE_FILE_PATH
              echo "    forwardTo:" >> $ROUTETABLE_FILE_PATH
              echo "      pathRewrite: /${MATCHER}" >> $ROUTETABLE_FILE_PATH
            done
          fi

          cat $ROUTETABLE_FILE_PATH  # Print the file for debugging

      - name: Commit and push changes
        run: |
          git add -u
          git status  # Check if files are staged
          git commit -m "Created/Updated Delegate RouteTable for workspace ${{ github.event.inputs.workspace_name }} and team ${{ github.event.inputs.team_name }}" || echo "No changes to commit"
          git push origin $BRANCH_NAME

      - name: Merge branch into main
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git merge --allow-unrelated-histories --no-ff $BRANCH_NAME || {
            git merge --strategy-option theirs --no-commit --no-ff $BRANCH_NAME &&
            git commit -m "Resolve merge conflict by keeping new changes"
          }
          git push origin main || (git pull --rebase origin main && git push origin main)

      - name: Delete branch after merge
        run: |
          git push origin --delete $BRANCH_NAME
