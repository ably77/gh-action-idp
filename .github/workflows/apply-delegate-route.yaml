name: Apply Delegate RouteTable

on:
  workflow_dispatch:
    inputs:
      workspace_name:
        description: 'The name of the Workspace'
        required: true
        default: 'gh-action-idp'
        type: string
      team_name:
        description: 'The name of the team using this RouteTable'
        required: true
        type: string
      matchers:
        description: 'Comma-separated list of URI prefixes for matchers without leading slash (e.g., "get,ip")'
        required: true
        type: string
      destination_kind:
        description: 'The kind of the destination resource (e.g., SERVICE)'
        required: false
        default: 'SERVICE'
        type: string
      destination_name:
        description: 'Name of the destination service'
        required: true
        type: string
      destination_port:
        description: 'Port number of the destination service'
        required: true
        type: string

permissions:
  contents: write

jobs:
  apply-delegate-route:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create an empty branch
        id: create_branch
        run: |
          BRANCH_NAME="delegate-route-${{ github.run_id }}-${{ github.event.inputs.workspace_name }}"
          git checkout --orphan $BRANCH_NAME
          git rm -rf .
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Render Delegate RouteTable manifest based on input
        id: render_manifest
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}
          TEAM_NAME=${{ github.event.inputs.team_name }}
          MATCHERS=${{ github.event.inputs.matchers }}
          DESTINATION_KIND=${{ github.event.inputs.destination_kind || 'SERVICE' }}
          DESTINATION_NAME=${{ github.event.inputs.destination_name }}
          DESTINATION_PORT=${{ github.event.inputs.destination_port }}

          ROUTETABLE_FILE_PATH="routes/${WORKSPACE_NAME}-${TEAM_NAME}-delegate-routetable.yaml"

          mkdir -p routes

          # Start writing the RouteTable YAML file
          echo "apiVersion: networking.gloo.solo.io/v2" > $ROUTETABLE_FILE_PATH
          echo "kind: RouteTable" >> $ROUTETABLE_FILE_PATH
          echo "metadata:" >> $ROUTETABLE_FILE_PATH
          echo "  name: ${WORKSPACE_NAME}-${WORKSPACE_NAME}-${TEAM_NAME}-delegate" >> $ROUTETABLE_FILE_PATH
          echo "  namespace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
          echo "  labels:" >> $ROUTETABLE_FILE_PATH
          echo "    workspace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
          echo "    team: ${TEAM_NAME}" >> $ROUTETABLE_FILE_PATH
          echo "spec:" >> $ROUTETABLE_FILE_PATH
          echo "  defaultDestination:" >> $ROUTETABLE_FILE_PATH
          echo "    port:" >> $ROUTETABLE_FILE_PATH
          echo "      number: ${DESTINATION_PORT}" >> $ROUTETABLE_FILE_PATH
          echo "    ref:" >> $ROUTETABLE_FILE_PATH
          echo "      name: ${DESTINATION_NAME}" >> $ROUTETABLE_FILE_PATH
          echo "      namespace: ${WORKSPACE_NAME}" >> $ROUTETABLE_FILE_PATH
          echo "  http:" >> $ROUTETABLE_FILE_PATH

          # Split the matchers and write each one into the YAML file
          IFS=',' read -ra MATCHER_ARRAY <<< "$MATCHERS"
          for MATCHER in "${MATCHER_ARRAY[@]}"; do
            echo "  - name: ${TEAM_NAME}-${MATCHER}" >> $ROUTETABLE_FILE_PATH
            echo "    matchers:" >> $ROUTETABLE_FILE_PATH
            echo "    - uri:" >> $ROUTETABLE_FILE_PATH
            echo "        prefix: /${MATCHER}" >> $ROUTETABLE_FILE_PATH
            echo "    forwardTo:" >> $ROUTETABLE_FILE_PATH
            echo "      pathRewrite: /${MATCHER}" >> $ROUTETABLE_FILE_PATH
          done

          echo "ROUTETABLE_FILE_PATH=$ROUTETABLE_FILE_PATH" >> $GITHUB_ENV

      - name: Commit and push changes
        run: |
          git add ${{ env.ROUTETABLE_FILE_PATH }}
          git commit -m "Add new Delegate RouteTable for workspace ${{ github.event.inputs.workspace_name }}"
          git push origin ${{ env.BRANCH_NAME }}

      - name: Merge branch into main
        run: |
          git fetch origin main
          git checkout main
          git pull origin main
          git merge --allow-unrelated-histories --no-ff ${{ env.BRANCH_NAME }} || \
          (git checkout --theirs -- routes/${{ github.event.inputs.workspace_name }}-delegate-routetable.yaml && git add routes/${{ github.event.inputs.workspace_name }}-delegate-routetable.yaml && git commit -m "Resolve conflict by keeping new changes" && git push origin main)
          git push origin main || (git pull --rebase origin main && git push origin main)

      - name: Delete branch after merge
        run: |
          git push origin --delete ${{ env.BRANCH_NAME }}
