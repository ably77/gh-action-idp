name: Delete Delegate RouteTable

on:
  workflow_dispatch:
    inputs:
      workspace_name:
        description: 'The name of the Workspace'
        required: true
        type: string
      team_name:
        description: 'The name of the team'
        required: true
        type: string

permissions:
  contents: write

jobs:
  delete-manifest:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Git user
        run: |
          git config --global user.name "GitHub Action"
          git config --global user.email "action@github.com"

      - name: Create a unique branch
        id: create_branch
        run: |
          BRANCH_NAME="delete-route-${{ github.run_id }}-${{ github.event.inputs.workspace_name }}-${{ github.event.inputs.team_name }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV

      - name: Find and delete RouteTable manifest file
        id: find_and_delete_manifest
        run: |
          WORKSPACE_NAME=${{ github.event.inputs.workspace_name }}
          TEAM_NAME=${{ github.event.inputs.team_name }}

          FILE_PATH="routes/${WORKSPACE_NAME}-${TEAM_NAME}-delegate-routetable.yaml"

          if [ ! -f "$FILE_PATH" ]; then
            echo "No file found with workspace_name $WORKSPACE_NAME and team_name $TEAM_NAME"
            exit 1
          else
            git rm "$FILE_PATH"
            echo "Deleted $FILE_PATH"
          fi

      - name: Commit and push changes
        run: |
          git commit -m "Deleted RouteTable manifest for workspace ${{ github.event.inputs.workspace_name }} and team ${{ github.event.inputs.team_name }} using GitHub Action"
          for i in {1..5}; do
            git push origin ${{ env.BRANCH_NAME }} && break || (git fetch origin main && git rebase origin/main && sleep $((i*2)))
          done

      - name: Merge branch into main
        run: |
          for i in {1..5}; do
            git fetch origin main
            git checkout main
            git pull origin main
            git merge --allow-unrelated-histories --no-ff ${{ env.BRANCH_NAME }}
            git push origin main && break || (git pull --rebase origin main && sleep $((i*2)))
          done

      - name: Delete branch after merge
        run: |
          git push origin --delete ${{ env.BRANCH_NAME }}
